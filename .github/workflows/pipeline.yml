# The name of the workflow.
name: Build and Deploy

# Run the workflow when code is pushed to the main branch
on:
  push:
    branches:
      - main

# Set environment variables
env:
  MONGODB_URL: ${{secrets.MONGODB_URL}}
  MONGODB_PASSWORD: ${{secrets.MONGODB_PASSWORD}}
  MONGODB_USERNAME: ${{secrets.MONGODB_USERNAME}}
  RAZORPAY_KEY: ${{secrets.RAZORPAY_KEY}}
  RAZORPAY_SECRET: ${{secrets.RAZORPAY_SECRET}}
  REACT_APP_BACKEND_URL: ${{secrets.REACT_APP_BACKEND_URL}}
  REACT_APP_RAZORPAY_KEY: ${{secrets.REACT_APP_RAZORPAY_KEY}}
  ORIGIN: ${{secrets.ORIGIN}}
  REACT_APP_CHAT_HOST: ${{secrets.REACT_APP_CHAT_HOST}}
  

# This is the workflow that is being run.
jobs:
  build-and-deploy:
    # This is telling GitHub to run the workflow on the latest version of Ubuntu.
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the GitHub repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Install dependencies and run tests for the client application
      - name: Install and Test Client
        working-directory: ./client
        run: |
          npm install
          export REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL
          export REACT_APP_RAZORPAY_KEY=$REACT_APP_RAZORPAY_KEY
          export REACT_APP_CHAT_HOST=$REACT_APP_CHAT_HOST

      # Install dependencies, export environment variables to be used by application and run tests for the server application
      - name: Install and Test Server
        working-directory: ./server
        run: |
          npm install
          export MONGODB_URL=$MONGODB_URL
          export MONGODB_PASSWORD=$MONGODB_PASSWORD
          export MONGODB_USERNAME=$MONGODB_USERNAME
          export RAZORPAY_KEY=$RAZORPAY_KEY
          export RAZORPAY_SECRET=$RAZORPAY_SECRET
          export ORIGIN=$ORIGIN
         

      # Build a Docker image for the client application
      - name: Build Client Docker Image
        working-directory: ./client
        # Build image with tag rakeshpotnuru/productivity-app:client
        run: |
          docker build -t ashs26/philchar-client-app:client-${{github.run_number}} -t ashs26/philchar-client-app:client-latest .

      # Build a Docker image for the server application
      - name: Build Server Docker Image
        working-directory:
          ./server
          # Build image with tag rakeshpotnuru/productivity-app:server
        run: |
          docker build -t ashs26/philchar-server-app:server-${{github.run_number}} -t ashs26/philchar-server-app:server-latest .
          
      - name: Build NGINX Docker Image
        working-directory: ./nginx
        # Build image with tag rakeshpotnuru/productivity-app:nginx
        run: |
          docker build -t ashs26/philchar-nginx-app:nginx-${{github.run_number}} -t ashs26/philchar-nginx-app:nginx-latest .


      # Login to Docker Hub using credentials from repository secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the Docker images to Docker Hub
      - name: Push Docker Images to Docker Hub
        run: |
          docker push ashs26/philchar-client-app:client-latest
          docker push ashs26/philchar-server-app:server-latest
          docker push ashs26/philchar-nginx-app:nginx-latest
          
          
            # This is the step that is deploying the application to Elastic Beanstalk.
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME }}
          environment_name: ${{ secrets.EB_ENV_NAME }}
          region: ${{ secrets.EB_REGION }}
          version_label: "version-${{ github.run_number }}"
          deployment_package: docker-compose.yml
          use_existing_version_if_available: true
          wait_for_environment_recovery: 3000
